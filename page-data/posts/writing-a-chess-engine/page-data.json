{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/writing-a-chess-engine","result":{"data":{"markdownRemark":{"id":"97362a61-ae3f-5831-8f6b-b3950a2daffe","html":"<p>I’ve written a dependency-free chess engine library in my free time between classes.</p>\n<h2 id=\"why-write-a-chess-engine\" style=\"position:relative;\"><a href=\"#why-write-a-chess-engine\" aria-label=\"why write a chess engine permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why write a Chess engine?</h2>\n<p>Above all, <a href=\"https://www.youtube.com/watch?v=DpXy041BIlA&#x26;t=7s\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this video</a> by <a href=\"http://tom7.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tom7</a> is my inspiration for this project. He’s absolutely brilliant and I implore you to watch his content.</p>\n<p>I love chess a <em>lot</em>. It’s definitely one of my favorite games ever. However, I’ve always been disappointed when trying to write programs that play chess digitally (particularly in a compiled language). Although several amazing engines exist, it’s near impossible to find a neat library for chess-related-programming that runs on everything.</p>\n<p>chess-engine is a solution to my problem. If you want a chess engine that runs on embedded devices, the terminal, <a href=\"https://github.com/adam-mcdaniel/chess-engine/tree/main/examples/chess-gui\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the desktop (with a gui)</a>, <em>and</em> <a href=\"https://adam-mcdaniel.github.io/chess-engine/docs/book/index.html#average-ai\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the web</a>, this is probably your best bet.</p>\n<h2 id=\"how-does-it-work\" style=\"position:relative;\"><a href=\"#how-does-it-work\" aria-label=\"how does it work permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How does it work?</h2>\n<p>This particular AI (along with most other chess AIs) works using the <a href=\"https://en.wikipedia.org/wiki/Minimax\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Minimax algorithm</a>, along with <a href=\"https://en.wikipedia.org/wiki/Alpha%E2%80%93beta_pruning\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Alpha-Beta pruning</a> for optimization.</p>\n<p>Now, let’s unpack that.</p>\n<p>The Minimax algorithm essentially iterates through all possible moves recursively, and evaluates all of the boards after the moves are played. If the board is <em>more</em> favorable, it will <strong>encourage</strong> playing its parent move, but if a board is <em>less</em> favorable, then it will select <strong>against</strong> playing a given move.</p>\n<p><img src=\"/blog/media/mini-max.jpeg\" alt=\"Minimax\"></p>\n<p>Additionally, when the AI attempts to see past just the current board, it will assume the human <em>always</em> responds with the best moves. As a result, the computer almost <strong>never</strong> blunders.\nThis allows the computer to almost always play objectively better moves than the player.</p>\n<h2 id=\"embedded-in-the-web\" style=\"position:relative;\"><a href=\"#embedded-in-the-web\" aria-label=\"embedded in the web permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Embedded in the Web</h2>\n<p>Because it has zero dependencies, it’s extremely simple to embed in the web browser using wasm. Try playing it yourself!</p>\n<p><strong><em>Average AI Setting:</em></strong></p>\n<div align=\"center\">\n  <embed type=\"text/html\" src=\"https://adam-mcdaniel.github.io/chess-engine/examples/chess-web/chess-best.html\" width=\"420\" height=\"420\"/>\n</div>\n<h3 id=\"abusing-minimax\" style=\"position:relative;\"><a href=\"#abusing-minimax\" aria-label=\"abusing minimax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Abusing Minimax</h3>\n<p>Because Minimax works by simply maximizing the AI’s material advantage over the player, it’s incredibly simple to abuse the algorithm by changing what it is maximizing.</p>\n<p>Here, for example, is the <strong><em>opposite</em></strong> of a good AI. This AI tries to maximize <strong><em>YOUR</em></strong> material value, and will desperately try to offer you its pieces while still making legal moves.\n<strong><em>Worst AI Setting:</em></strong></p>\n<div align=\"center\">\n    <embed type=\"text/html\" src=\"https://adam-mcdaniel.github.io/chess-engine/examples/chess-web/chess-worst.html\" width=\"420\" height=\"420\"/>\n</div>\n<h3 id=\"chess-variants\" style=\"position:relative;\"><a href=\"#chess-variants\" aria-label=\"chess variants permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Chess Variants</h3>\n<p>Additionally, builtin, chess-engine offers an incredibly simple chess variant called Horde, which I find very fun.</p>\n<p><strong><em>Horde Chess Variant:</em></strong></p>\n<div align=\"center\">\n    <embed type=\"text/html\" src=\"https://adam-mcdaniel.github.io/chess-engine/examples/chess-web/chess-horde.html\" width=\"420\" height=\"420\"/>\n</div>\n<p>Additionally, chess-engine supports getting all of the legal moves for a player. So, naturally, I had to add a random-move AI.</p>\n<p><strong><em>Random AI Setting:</em></strong></p>\n<div align=\"center\">\n    <embed type=\"text/html\" src=\"https://adam-mcdaniel.github.io/chess-engine/examples/chess-web/chess-random.html\" width=\"420\" height=\"420\"/>\n</div>","fields":{"slug":"/posts/writing-a-chess-engine","tagSlugs":["/tag/games/","/tag/chess/","/tag/design/"]},"frontmatter":{"date":"2021-02-15T11:52:37.121Z","description":"I've written a dependency-free chess engine library in my free time between classes.","tags":["Games","Chess","Design"],"title":"Writing a Chess Engine","socialImage":"/blog/media/chess.jpg"}}},"pageContext":{"slug":"/posts/writing-a-chess-engine"}},"staticQueryHashes":["251939775","3942705351","401334301"]}