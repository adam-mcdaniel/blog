<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Adam | Blog]]></title><description><![CDATA[Discussions about my projects and computer science in general]]></description><link>https://adam-mcdaniel.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 27 Aug 2020 04:57:36 GMT</lastBuildDate><item><title><![CDATA[The Oak Compiler]]></title><description><![CDATA[I've written an alternative to the C programming language. This is how it works, and what I've learned.]]></description><link>https://adam-mcdaniel.github.io/posts/the-oak-compiler</link><guid isPermaLink="false">https://adam-mcdaniel.github.io/posts/the-oak-compiler</guid><pubDate>Thu, 27 Aug 2020 11:52:37 GMT</pubDate><content:encoded>&lt;p&gt;I’ve written an alternative to the C programming language. This is how it
works, and what I’ve learned.&lt;/p&gt;
&lt;h2 id=&quot;free&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#free&quot; aria-label=&quot;free permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Free&lt;/h2&gt;
&lt;p&gt;About 6 months ago, I began exploring compilers with &lt;a href=&quot;https://en.wikipedia.org/wiki/Turing_tarpit&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;&lt;em&gt;extremely limited&lt;/em&gt;&lt;/a&gt; target backends. I came across &lt;a href=&quot;https://github.com/brain-lang/brain&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;the brain programming language&lt;/a&gt; and I was &lt;em&gt;immediately&lt;/em&gt; inspired. How could a high level programming language possibly use such a tiny backend? It was incredibly interesting to me, so I decided to write my own language, &lt;a href=&quot;https://github.com/adam-mcdaniel/free&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;free&lt;/a&gt;. It used a super-set of Brain**** with 3 new instructions for dynamic memory management. After a substantial amount of keyboard clacking and lots of confusion, I had accidentally made a working compiler! The end result looked like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/media/free.png&quot; alt=&quot;Free Code&quot;&gt;&lt;/p&gt;
&lt;p&gt;I couldn’t believed it worked; it was incredible. The only problem was that &lt;em&gt;&lt;strong&gt;free was absolute garbage&lt;/strong&gt;&lt;/em&gt;. It couldn’t be used for anything. At all. There wasn’t a type system, memory was basically impossible to manage, there wasn’t any kind of IO other than STDIN and STDOUT, there was no error checking system of any kind, etc. I loved my creation, but it wasn’t practical.&lt;/p&gt;
&lt;h2 id=&quot;oaks-conception&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#oaks-conception&quot; aria-label=&quot;oaks conception permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Oak’s Conception&lt;/h2&gt;
&lt;p&gt;Then, I had an idea. What if I kept the tape memory structure from Brain****, kept the memory management operations from free, and added some operators for managing a stack? The result was Oak’s backend assembly language. After a week of experimenting, I created an incredibly reduced instruction set with only 12 operators that could output basic C code. &lt;em&gt;“This is perfect”&lt;/em&gt;, I thought. I implemented an intermediate representation that implemented functions, structures, a type system, and basic operations that any programming language needs. I even added a foreign function interface, so that users could import C code into their programs! I was incredibly excited.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/media/oak.png&quot; alt=&quot;Oak Code&quot;&gt;&lt;/p&gt;
&lt;p&gt;It was at about this point that the language took* off on Reddit, HackerNews, and GitHub. Only a &lt;em&gt;single day&lt;/em&gt; after posting the GitHub link to Reddit, I had over &lt;strong&gt;&lt;em&gt;16,000&lt;/em&gt;&lt;/strong&gt; unique visitors to the repository. I had never received much attention on Reddit or GitHub, so this was incredibly powerful to me. It fueled me to keep going.&lt;/p&gt;
&lt;p&gt;At around this point, the project was still pretty barebones. It had all the basic necessities, but nothing more. There was still a &lt;em&gt;lot&lt;/em&gt; to be done. Oak was basically just a glorified, stripped down, and less robust C compiler.&lt;/p&gt;
&lt;h2 id=&quot;typechecking-is-hard&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#typechecking-is-hard&quot; aria-label=&quot;typechecking is hard permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Typechecking is hard&lt;/h2&gt;
&lt;p&gt;Although I knew typechecking could get complicated, I didn’t know it would take up about &lt;em&gt;half of my intermediate representation’s codebase&lt;/em&gt;. Typechecking isn’t about confirming if a program is correct, it’s about confirming a program &lt;strong&gt;isn’t&lt;/strong&gt; correct. Although that distinction might sound a bit unnecessary, I assure you it is not. Typechecking is difficult because you have to consider &lt;strong&gt;every incorrect program possible&lt;/strong&gt;, and try to eliminate each one. It’s almost impossible to get right, and there are probably dozens of logic errors in Oak’s type system &lt;em&gt;right now&lt;/em&gt;. &lt;em&gt;But&lt;/em&gt;, in the end, it works pretty well. It’s mostly just the fringe cases that are a bit off.&lt;/p&gt;
&lt;p&gt;By far, the hardest part is typechecking the code responsible for automatic memory management. There are so many things that can go wrong, it’s unbelievable how easy it is to screw up. One big problem I ran into was determining whether or not a structure &lt;em&gt;needed&lt;/em&gt; to use automatic memory management &lt;em&gt;at all&lt;/em&gt;. Why use copy constructors and destructors for a type that doesn’t have any members with copy constructors or destructors? And how do you confirm that all objects’ destructors will be called? After some experimenting, I think I figured out an air tight solution, but honestly &lt;em&gt;I really don’t know if there are ways to abuse the automatic memory management system&lt;/em&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[The Importance of Beauty]]></title><description><![CDATA[While the practical aspect of an application is incredibly important, I believe that the presentation is significantly more important.]]></description><link>https://adam-mcdaniel.github.io/posts/the-importance-of-beauty</link><guid isPermaLink="false">https://adam-mcdaniel.github.io/posts/the-importance-of-beauty</guid><pubDate>Mon, 10 Aug 2020 11:52:37 GMT</pubDate><content:encoded>&lt;p&gt;While the practical aspect of an application is incredibly important, I believe that the presentation is significantly more important. If you can’t display your product to your users in an appealing way, their attention will be drawn to more visually appealing alternatives.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/media/design.png&quot; alt=&quot;Design&quot;&gt;&lt;/p&gt;
&lt;p&gt;When I build an application, I’m always sure to make the presentation as good as possible before launch. Take, for example, &lt;a href=&quot;https://github.com/adam-mcdaniel/oakc&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Oak&lt;/a&gt; (yes, I know I’m going crazy with posts about this project). Before I posted the project &lt;em&gt;anywhere&lt;/em&gt;, I made sure I had an extensive README page with lots of pictures, tables, and formatted text to make reading easier on the eyes. The &lt;strong&gt;&lt;em&gt;first thing the reader sees is a nice looking image of example code&lt;/em&gt;&lt;/strong&gt;. While Oak’s features speak for themselves, I don’t think the code is responsible for the project’s success. &lt;strong&gt;The key was the presentation&lt;/strong&gt;. Similarly, I’ve found that other projects that &lt;em&gt;don’t&lt;/em&gt; use flashy presentations, don’t get nearly the attention they deserve. Take &lt;a href=&quot;https://github.com/davidberneda/Vidi&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Vidi&lt;/a&gt;, for example. This project is &lt;em&gt;crazy&lt;/em&gt; good for a new language made by one person. Not only did he implement a really good looking language, he made an IDE to make development easier.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/media/vidi.png&quot; alt=&quot;Vidi&quot;&gt;&lt;/p&gt;
&lt;p&gt;However, after a launch on Reddit, the project only got &lt;em&gt;&lt;strong&gt;2 stars on GitHub&lt;/strong&gt;&lt;/em&gt;. How is that even possible? The answer is &lt;em&gt;the README isn’t flashy enough&lt;/em&gt;. His README consisted of a single image, and two links. That’s it. There’s nothing for the reader to get attached to or excited about.&lt;/p&gt;
&lt;p&gt;A project truly suffers without a good README or website. The best way to draw interest &lt;em&gt;isn’t&lt;/em&gt; to make a great product. It’s to make a &lt;em&gt;GOOD&lt;/em&gt; (at least) product &lt;em&gt;AND&lt;/em&gt; to make a great first impression.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Combinator Compilers]]></title><description><![CDATA[A brief exploration of combinator compilers.]]></description><link>https://adam-mcdaniel.github.io/posts/combinator-compilers</link><guid isPermaLink="false">https://adam-mcdaniel.github.io/posts/combinator-compilers</guid><pubDate>Wed, 04 Mar 2020 11:52:37 GMT</pubDate><content:encoded>&lt;p&gt;Over the past few months, I’ve been really excited about the implementation of functional programming languages. The reason I’m so excited about implementing them is because of this concept of &lt;strong&gt;&lt;em&gt;combinators&lt;/em&gt;&lt;/strong&gt;. Combinators are basically primitive lambda functions that are really simple but very powerful. There’s something &lt;strong&gt;&lt;em&gt;REALLY&lt;/em&gt;&lt;/strong&gt; special about combinators though. Any lambda expression that can be written, no matter how complex, can be rewritten as applications of a &lt;strong&gt;single&lt;/strong&gt; combinator. This means that any lambda calculus program can be compiled to a giant expression of single function calls which are really easy to interpret. You dont even need to write a crazy implementation of beta reduction seen below!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/media/beta_reduction.png&quot; alt=&quot;Beta Reduction&quot;&gt;&lt;/p&gt;
&lt;p&gt;The most powerful part about combinator compilers, in my opinion, is the fact that their intermediate code is so portable. Combinator interpreters are so easy to write in any turing machine or lambda calculus based language. Compilers are a bit more complex, but still relatively simple. All you have to do is implement the combinators for your target language or architecture, and you’re ready to compile!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Writing a Compiler with Honeycomb]]></title><description><![CDATA[After reading about parser combinator libraries, I started to write my own! I eventually got it into a working state, and published it on crates.io under the name `honeycomb`.]]></description><link>https://adam-mcdaniel.github.io/posts/writing-a-compiler-with-honeycomb</link><guid isPermaLink="false">https://adam-mcdaniel.github.io/posts/writing-a-compiler-with-honeycomb</guid><pubDate>Thu, 09 Jan 2020 01:35:32 GMT</pubDate><content:encoded>&lt;p&gt;After reading about parser combinator libraries, I started to write my own! I eventually got it into a working state, and published it on crates.io under the name &lt;code class=&quot;language-text&quot;&gt;honeycomb&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can find it &lt;a href=&quot;https://github.com/adam-mcdaniel/honeycomb&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My absolute FAVORITE thing about honeycomb is that it doesn’t depend on anything, not even the standard library! Im super proud of that fact :)&lt;/p&gt;
&lt;p&gt;To test honeycomb’s capabilities, I started work on a simple compiler for an object oriented and functional programming language. Within a three or so hours of work, the compiler was fully implemented! This was a huge surprise to me because working with Lark-Parser in Python would take a full days work.&lt;/p&gt;
&lt;p&gt;The you can find the language &lt;a href=&quot;https://github.com/adam-mcdaniel/honeycomb&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It’s dynamically typed, and is compiled to a custom 10 instruction set virtual machine code implemented in Rust. After compiling my language to Rust, the output Rust code can then be lowered to native executable code!&lt;/p&gt;
&lt;p&gt;Although this was just a test, I am VERY interested in writing a compiled scripting language that acts as a cross platform version of Bash. I’ve drawn a lot of my inspiration from Groovy, which is a language commonly used as a more robust replacement for shell scripts. I think a cross platform scripting language and shell would be a wonderful advancement in programming technology, and I can’t wait to investigate this topic further.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Object Oriented Shell Scripting]]></title><description><![CDATA[While PowerShell can be cumbersome and ugly, its take on object orientation is very useful.]]></description><link>https://adam-mcdaniel.github.io/posts/object-oriented-shell-scripting</link><guid isPermaLink="false">https://adam-mcdaniel.github.io/posts/object-oriented-shell-scripting</guid><pubDate>Sun, 01 Sep 2019 01:35:32 GMT</pubDate><content:encoded>&lt;p&gt;I used to dislike PowerShell very very much, but now I’ve become inspired by it. I was completely unaware of its Object Oriented features, and I think it’s a genius idea. Although I still dislike the implementation, PowerShell is a beautiful concept.&lt;/p&gt;
&lt;p&gt;In the Bash shell, every program returns an exit code. In PowerShell, however, everything returns a table. This is extremely useful for organizing data, and it can be extremely efficient. Operations like filtering files by their size can become really simple.&lt;/p&gt;
&lt;p&gt;Having been inspired, I started work on my own shell. Using the abstract syntax tree of xasm and slightly rewriting the parser, I was able to very quickly write an implementation of my shell, named Dune.&lt;/p&gt;
&lt;p&gt;Here’s a demonstration of the very first 0.1.0 version!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/media/dune.png&quot; alt=&quot;Dune&quot;&gt;&lt;/p&gt;
&lt;p&gt;As you can see, it’s very basic and ugly right now, but aesthetics are simple to change.&lt;/p&gt;
&lt;p&gt;Within a few hours of starting the project, we already have the ability to create tables and index them. We also have the ability to do control flow. While loops are also supported, but this is not shown in the demonstration.&lt;/p&gt;
&lt;p&gt;If you want to see my progress on Dune, visit the repository &lt;a href=&quot;https://github.com/adam-mcdaniel/dune&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt;&lt;/p&gt;</content:encoded></item></channel></rss>