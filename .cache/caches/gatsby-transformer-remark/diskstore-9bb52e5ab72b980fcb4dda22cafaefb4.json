{"expireTime":9007200870961765000,"key":"transformer-remark-markdown-html-ast-a75bf4e2c82f9f354e6728d57b5cf97a-gatsby-remark-relative-imagesgatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-external-links-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I’ve written an alternative to the C programming language. This is how it\nworks, and what I’ve learned.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":3,"column":30,"offset":105}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":3,"column":30,"offset":105}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"free","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#free","aria-label":"free permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Free","position":{"start":{"line":5,"column":4,"offset":110},"end":{"line":5,"column":8,"offset":114}}}],"position":{"start":{"line":5,"column":1,"offset":107},"end":{"line":5,"column":8,"offset":114}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"About 6 months ago, I began exploring compilers with ","position":{"start":{"line":7,"column":1,"offset":116},"end":{"line":7,"column":54,"offset":169}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Turing_tarpit","target":"_blank","rel":"nofollow noopener noreferrer"},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"extremely limited","position":{"start":{"line":7,"column":56,"offset":171},"end":{"line":7,"column":73,"offset":188}}}],"position":{"start":{"line":7,"column":55,"offset":170},"end":{"line":7,"column":74,"offset":189}}}],"position":{"start":{"line":7,"column":54,"offset":169},"end":{"line":7,"column":120,"offset":235}}},{"type":"text","value":" target backends. I came across ","position":{"start":{"line":7,"column":120,"offset":235},"end":{"line":7,"column":152,"offset":267}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/brain-lang/brain","target":"_blank","rel":"nofollow noopener noreferrer"},"children":[{"type":"text","value":"the brain programming language","position":{"start":{"line":7,"column":153,"offset":268},"end":{"line":7,"column":183,"offset":298}}}],"position":{"start":{"line":7,"column":152,"offset":267},"end":{"line":7,"column":221,"offset":336}}},{"type":"text","value":" and I was ","position":{"start":{"line":7,"column":221,"offset":336},"end":{"line":7,"column":232,"offset":347}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"immediately","position":{"start":{"line":7,"column":233,"offset":348},"end":{"line":7,"column":244,"offset":359}}}],"position":{"start":{"line":7,"column":232,"offset":347},"end":{"line":7,"column":245,"offset":360}}},{"type":"text","value":" inspired. How could a high level programming language possibly use such a tiny backend? It was incredibly interesting to me, so I decided to write my own language, ","position":{"start":{"line":7,"column":245,"offset":360},"end":{"line":7,"column":410,"offset":525}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/adam-mcdaniel/free","target":"_blank","rel":"nofollow noopener noreferrer"},"children":[{"type":"text","value":"free","position":{"start":{"line":7,"column":411,"offset":526},"end":{"line":7,"column":415,"offset":530}}}],"position":{"start":{"line":7,"column":410,"offset":525},"end":{"line":7,"column":455,"offset":570}}},{"type":"text","value":". It used a super-set of Brain**** with 3 new instructions for dynamic memory management. After a substantial amount of keyboard clacking and lots of confusion, I had accidentally made a working compiler! The end result looked like this:","position":{"start":{"line":7,"column":455,"offset":570},"end":{"line":7,"column":692,"offset":807}}}],"position":{"start":{"line":7,"column":1,"offset":116},"end":{"line":7,"column":692,"offset":807}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/blog/media/free.png","alt":"Free Code"},"children":[],"position":{"start":{"line":9,"column":1,"offset":809},"end":{"line":9,"column":35,"offset":843}}}],"position":{"start":{"line":9,"column":1,"offset":809},"end":{"line":9,"column":35,"offset":843}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I couldn’t believed it worked; it was incredible. The only problem was that ","position":{"start":{"line":11,"column":1,"offset":845},"end":{"line":11,"column":77,"offset":921}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"free was absolute garbage","position":{"start":{"line":11,"column":80,"offset":924},"end":{"line":11,"column":105,"offset":949}}}],"position":{"start":{"line":11,"column":78,"offset":922},"end":{"line":11,"column":107,"offset":951}}}],"position":{"start":{"line":11,"column":77,"offset":921},"end":{"line":11,"column":108,"offset":952}}},{"type":"text","value":". It couldn’t be used for anything. At all. There wasn’t a type system, memory was basically impossible to manage, there wasn’t any kind of IO other than STDIN and STDOUT, there was no error checking system of any kind, etc. I loved my creation, but it wasn’t practical.","position":{"start":{"line":11,"column":108,"offset":952},"end":{"line":11,"column":378,"offset":1222}}}],"position":{"start":{"line":11,"column":1,"offset":845},"end":{"line":11,"column":378,"offset":1222}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"oaks-conception","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#oaks-conception","aria-label":"oaks conception permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Oak’s Conception","position":{"start":{"line":13,"column":4,"offset":1227},"end":{"line":13,"column":20,"offset":1243}}}],"position":{"start":{"line":13,"column":1,"offset":1224},"end":{"line":13,"column":20,"offset":1243}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Then, I had an idea. What if I kept the tape memory structure from Brain****, kept the memory management operations from free, and added some operators for managing a stack? The result was Oak’s backend assembly language. After a week of experimenting, I created an incredibly reduced instruction set with only 12 operators that could output basic C code. ","position":{"start":{"line":15,"column":1,"offset":1245},"end":{"line":15,"column":357,"offset":1601}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"“This is perfect”","position":{"start":{"line":15,"column":358,"offset":1602},"end":{"line":15,"column":375,"offset":1619}}}],"position":{"start":{"line":15,"column":357,"offset":1601},"end":{"line":15,"column":376,"offset":1620}}},{"type":"text","value":", I thought. I implemented an intermediate representation that implemented functions, structures, a type system, and basic operations that any programming language needs. I even added a foreign function interface, so that users could import C code into their programs! I was incredibly excited.","position":{"start":{"line":15,"column":376,"offset":1620},"end":{"line":15,"column":670,"offset":1914}}}],"position":{"start":{"line":15,"column":1,"offset":1245},"end":{"line":15,"column":670,"offset":1914}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/blog/media/oak.png","alt":"Oak Code"},"children":[],"position":{"start":{"line":17,"column":1,"offset":1916},"end":{"line":17,"column":33,"offset":1948}}}],"position":{"start":{"line":17,"column":1,"offset":1916},"end":{"line":17,"column":33,"offset":1948}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It was at about this point that the language took* off on Reddit, HackerNews, and GitHub. Only a ","position":{"start":{"line":19,"column":1,"offset":1950},"end":{"line":19,"column":98,"offset":2047}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"single day","position":{"start":{"line":19,"column":99,"offset":2048},"end":{"line":19,"column":109,"offset":2058}}}],"position":{"start":{"line":19,"column":98,"offset":2047},"end":{"line":19,"column":110,"offset":2059}}},{"type":"text","value":" after posting the GitHub link to Reddit, I had over ","position":{"start":{"line":19,"column":110,"offset":2059},"end":{"line":19,"column":163,"offset":2112}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"16,000","position":{"start":{"line":19,"column":166,"offset":2115},"end":{"line":19,"column":172,"offset":2121}}}],"position":{"start":{"line":19,"column":165,"offset":2114},"end":{"line":19,"column":173,"offset":2122}}}],"position":{"start":{"line":19,"column":163,"offset":2112},"end":{"line":19,"column":175,"offset":2124}}},{"type":"text","value":" unique visitors to the repository. I had never received much attention on Reddit or GitHub, so this was incredibly powerful to me. It fueled me to keep going.","position":{"start":{"line":19,"column":175,"offset":2124},"end":{"line":19,"column":334,"offset":2283}}}],"position":{"start":{"line":19,"column":1,"offset":1950},"end":{"line":19,"column":334,"offset":2283}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"At around this point, the project was still pretty barebones. It had all the basic necessities, but nothing more. There was still a ","position":{"start":{"line":21,"column":1,"offset":2285},"end":{"line":21,"column":133,"offset":2417}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"lot","position":{"start":{"line":21,"column":134,"offset":2418},"end":{"line":21,"column":137,"offset":2421}}}],"position":{"start":{"line":21,"column":133,"offset":2417},"end":{"line":21,"column":138,"offset":2422}}},{"type":"text","value":" to be done. Oak was basically just a glorified, stripped down, and less robust C compiler.","position":{"start":{"line":21,"column":138,"offset":2422},"end":{"line":21,"column":229,"offset":2513}}}],"position":{"start":{"line":21,"column":1,"offset":2285},"end":{"line":21,"column":229,"offset":2513}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"typechecking-is-hard","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#typechecking-is-hard","aria-label":"typechecking is hard permalink","class":"anchor before"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Typechecking is hard","position":{"start":{"line":23,"column":4,"offset":2518},"end":{"line":23,"column":24,"offset":2538}}}],"position":{"start":{"line":23,"column":1,"offset":2515},"end":{"line":23,"column":24,"offset":2538}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Although I knew typechecking could get complicated, I didn’t know it would take up about ","position":{"start":{"line":25,"column":1,"offset":2540},"end":{"line":25,"column":90,"offset":2629}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"half of my intermediate representation’s codebase","position":{"start":{"line":25,"column":91,"offset":2630},"end":{"line":25,"column":140,"offset":2679}}}],"position":{"start":{"line":25,"column":90,"offset":2629},"end":{"line":25,"column":141,"offset":2680}}},{"type":"text","value":". Typechecking isn’t about confirming if a program is correct, it’s about confirming a program ","position":{"start":{"line":25,"column":141,"offset":2680},"end":{"line":25,"column":236,"offset":2775}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"isn’t","position":{"start":{"line":25,"column":238,"offset":2777},"end":{"line":25,"column":243,"offset":2782}}}],"position":{"start":{"line":25,"column":236,"offset":2775},"end":{"line":25,"column":245,"offset":2784}}},{"type":"text","value":" correct. Although that distinction might sound a bit unnecessary, I assure you it is not. Typechecking is difficult because you have to consider ","position":{"start":{"line":25,"column":245,"offset":2784},"end":{"line":25,"column":391,"offset":2930}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"every incorrect program possible","position":{"start":{"line":25,"column":393,"offset":2932},"end":{"line":25,"column":425,"offset":2964}}}],"position":{"start":{"line":25,"column":391,"offset":2930},"end":{"line":25,"column":427,"offset":2966}}},{"type":"text","value":", and try to eliminate each one. It’s almost impossible to get right, and there are probably dozens of logic errors in Oak’s type system ","position":{"start":{"line":25,"column":427,"offset":2966},"end":{"line":25,"column":564,"offset":3103}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"right now","position":{"start":{"line":25,"column":565,"offset":3104},"end":{"line":25,"column":574,"offset":3113}}}],"position":{"start":{"line":25,"column":564,"offset":3103},"end":{"line":25,"column":575,"offset":3114}}},{"type":"text","value":". ","position":{"start":{"line":25,"column":575,"offset":3114},"end":{"line":25,"column":577,"offset":3116}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"But","position":{"start":{"line":25,"column":578,"offset":3117},"end":{"line":25,"column":581,"offset":3120}}}],"position":{"start":{"line":25,"column":577,"offset":3116},"end":{"line":25,"column":582,"offset":3121}}},{"type":"text","value":", in the end, it works pretty well. It’s mostly just the fringe cases that are a bit off.","position":{"start":{"line":25,"column":582,"offset":3121},"end":{"line":25,"column":671,"offset":3210}}}],"position":{"start":{"line":25,"column":1,"offset":2540},"end":{"line":25,"column":671,"offset":3210}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/blog/media/typecheck.png","alt":"Typechecking"},"children":[],"position":{"start":{"line":27,"column":1,"offset":3212},"end":{"line":27,"column":43,"offset":3254}}}],"position":{"start":{"line":27,"column":1,"offset":3212},"end":{"line":27,"column":43,"offset":3254}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"By far, the hardest part is typechecking the code responsible for automatic memory management. There are so many things that can go wrong, it’s unbelievable how easy it is to screw up. One big problem I ran into was determining whether or not a structure ","position":{"start":{"line":29,"column":1,"offset":3256},"end":{"line":29,"column":256,"offset":3511}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"needed","position":{"start":{"line":29,"column":257,"offset":3512},"end":{"line":29,"column":263,"offset":3518}}}],"position":{"start":{"line":29,"column":256,"offset":3511},"end":{"line":29,"column":264,"offset":3519}}},{"type":"text","value":" to use automatic memory management ","position":{"start":{"line":29,"column":264,"offset":3519},"end":{"line":29,"column":300,"offset":3555}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"at all","position":{"start":{"line":29,"column":301,"offset":3556},"end":{"line":29,"column":307,"offset":3562}}}],"position":{"start":{"line":29,"column":300,"offset":3555},"end":{"line":29,"column":308,"offset":3563}}},{"type":"text","value":". Why use copy constructors and destructors for a type that doesn’t have any members with copy constructors or destructors? And how do you confirm that all objects’ destructors will be called? After some experimenting, I think I figured out an air tight solution, but honestly ","position":{"start":{"line":29,"column":308,"offset":3563},"end":{"line":29,"column":585,"offset":3840}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"I really don’t know if there are ways to abuse the automatic memory management system","position":{"start":{"line":29,"column":586,"offset":3841},"end":{"line":29,"column":671,"offset":3926}}}],"position":{"start":{"line":29,"column":585,"offset":3840},"end":{"line":29,"column":672,"offset":3927}}},{"type":"text","value":".","position":{"start":{"line":29,"column":672,"offset":3927},"end":{"line":29,"column":673,"offset":3928}}}],"position":{"start":{"line":29,"column":1,"offset":3256},"end":{"line":29,"column":673,"offset":3928}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":30,"column":1,"offset":3929}}}}